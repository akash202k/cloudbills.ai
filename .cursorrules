Project: AWS Cost Analysis Backend
Framework: FastAPI with Python 3.11+
Purpose: Backend API for AWS cost analysis with plans to support Azure and GCP

Project Structure:
- Use 'aws' module instead of 'app' for AWS-specific code
- Plan for multi-cloud support (azure/, gcp/ modules later)
- Follow clean architecture with separation of concerns
- API endpoints in aws/api/v1/endpoints/
- Business logic in aws/services/
- AWS SDK interactions in aws/core/aws_client.py
- Pydantic models in aws/models/

Code Standards:
- Use type hints for all functions
- Use async/await for all endpoint handlers
- Follow PEP 8 style guide
- Add docstrings to all classes and functions
- Handle errors with proper HTTP status codes
- Use dependency injection for services
- Validate all inputs with Pydantic models

Security Requirements:
- Use API key authentication via X-API-Key header
- Never expose AWS credentials in responses
- Validate and sanitize all inputs
- Use environment variables for sensitive data
- Implement rate limiting for API endpoints

AWS Integration:
- Use boto3 for AWS SDK calls
- Implement proper error handling for AWS API limits
- Cache responses where appropriate to minimize API calls
- Use pagination for large result sets
- Handle AWS region-specific requirements

Testing Requirements:
- Write unit tests for all services
- Write integration tests for API endpoints
- Mock AWS SDK calls in tests
- Aim for >80% code coverage
- Use pytest with async support

Performance Considerations:
- Implement caching for frequently accessed data
- Use connection pooling for AWS clients
- Paginate large responses
- Add request/response logging
- Monitor API response times

When generating code:
- Always use 'aws' module path, not 'app'
- Include proper error handling
- Add type hints
- Include docstrings
- Follow the existing project structure
- Consider multi-cloud extensibility
